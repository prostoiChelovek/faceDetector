//
// Created by prostoichelovek on 21.07.19.
//

#ifndef FACES_FACE_H
#define FACES_FACE_H


#include <iostream>
#include <fstream>
#include <vector>
#include <map>

#include <opencv2/opencv.hpp>
#include <opencv2/dnn.hpp>
#include <opencv2/face.hpp>

#include "../utils/utils.hpp"

namespace Faces {

    class Face {
    public:
        cv::Rect rect;

        cv::RotatedRect rect_normalized;

        int confidence = 0;

        const static int minOffset = 5;
        cv::Point offset; // distance between current position and last

        int minLabelNotChanged = 5;
        long labelNotChanged = 0; // number of consecutive label recognitions

        // in most cases use getLabel instated
        int label = -3;

        Face *last = nullptr;

        std::map<std::string, int> executedCallbacks;

        std::vector<cv::Point> landmarks;

        cv::Mat img;

        // 128D desciptor generated by DNN
        cv::Mat descriptor;

        Face() = default;

        Face(cv::Point p1, cv::Point p2, int label);

        bool checkBounds(const cv::Size &imgSize);

        void setLast(Face *f);

        void setLabel(int lbl);

        // -1 -- not recognized
        // -2 -- label changed recently
        // -3 -- label has not been set
        // -4 -- face is fake
        int getLabel() const;

        bool hasMoved() const;

        // if color is not specified, it will be selected based on label
        cv::Scalar draw(cv::Mat &img, const std::vector<std::string> *labels = nullptr,
                        const cv::Scalar &color = cv::Scalar(-1)) const;

        bool operator==(const Face &f);

        bool operator!=(const Face &f);
    };

}

#endif //FACES_FACE_H
